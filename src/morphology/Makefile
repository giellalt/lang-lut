# Makefile.in generated by automake 1.14.1 from Makefile.am.
# src/morphology/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/gtlangs-slh
pkgincludedir = $(includedir)/gtlangs-slh
pkglibdir = $(libdir)/gtlangs-slh
pkglibexecdir = $(libexecdir)/gtlangs-slh
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin12.5.0
host_triplet = x86_64-apple-darwin12.5.0
DIST_COMMON = $(top_srcdir)/am-shared/src-morphology-dir-include.am \
	$(srcdir)/Makefile.in $(srcdir)/Makefile.am
am__append_1 = $(GTLANG).lexc.hfst
am__append_2 = $(GTLANG).lexc.xfst
subdir = src/morphology
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_python_module.m4 \
	$(top_srcdir)/m4/giellatekno.m4 $(top_srcdir)/m4/hfst.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
DATA = $(noinst_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/rueter/main/langs/slh/build-aux/missing aclocal-1.14
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AUTOCONF = ${SHELL} /Users/rueter/main/langs/slh/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /Users/rueter/main/langs/slh/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /Users/rueter/main/langs/slh/build-aux/missing automake-1.14
AWK = /opt/local/bin/gawk
CYGPATH_W = echo
CYGWINJAVAPATH = echo
DEFS = -DPACKAGE_NAME=\"gtlangs-slh\" -DPACKAGE_TARNAME=\"gtlangs-slh\" -DPACKAGE_VERSION=\"20110617\" -DPACKAGE_STRING=\"gtlangs-slh\ 20110617\" -DPACKAGE_BUGREPORT=\"feedback@divvun.no\" -DPACKAGE_URL=\"http://divvun.no\" -DPACKAGE=\"gtlangs-slh\" -DVERSION=\"20110617\"
ECHO_C = \c
ECHO_N = 
ECHO_T = 
FORREST = /Users/rueter/forrest/bin/forrest
GTCORE = /Users/rueter/main/gtcore
GTCORESH = /Users/rueter/main/gtcore/scripts/gt-core.sh
GTD_VERSION = /Users/rueter/main/gtcore/scripts/gt-version.sh
GTLANG = slh
GTLANG2 = slh
GTMAINTAINER = 
GZIP = /usr/bin/gzip
HFST_COMPOSE = /usr/local/bin/hfst-compose
HFST_COMPOSE_INTERSECT = /usr/local/bin/hfst-compose-intersect
HFST_CONCATENATE = /usr/local/bin/hfst-concatenate
HFST_CONJUNCT = /usr/local/bin/hfst-conjunct
HFST_DETERMINIZE = /usr/local/bin/hfst-determinize
HFST_DISJUNCT = /usr/local/bin/hfst-disjunct
HFST_FOMA = /usr/local/bin/hfst-foma
HFST_FST2FST = /usr/local/bin/hfst-fst2fst
HFST_FST2STRINGS = /usr/local/bin/hfst-fst2strings
HFST_FST2TXT = /usr/local/bin/hfst-fst2txt
HFST_INFO = /usr/local/bin/hfst-info
HFST_INVERT = /usr/local/bin/hfst-invert
HFST_LEXC = /usr/local/bin/hfst-lexc
HFST_LEXC2FST = /usr/local/bin/hfst-lexc2fst
HFST_LOOKUP = /usr/local/bin/hfst-lookup
HFST_MINIMIZE = /usr/local/bin/hfst-minimize
HFST_MINIMIZE_SPELLER = /usr/local/bin/hfst-remove-epsilons
HFST_MINUS = /usr/local/bin/hfst-minus
HFST_MULTIPLY = /usr/local/bin/hfst-multiply
HFST_NAME = /usr/local/bin/hfst-name
HFST_PAIR_TEST = /usr/local/bin/hfst-pair-test
HFST_PROC = /usr/local/bin/hfst-proc
HFST_PROJECT = /usr/local/bin/hfst-project
HFST_PRUNE_ALPHABET = /usr/local/bin/hfst-prune-alphabet
HFST_PUSH_WEIGHTS = /usr/local/bin/hfst-push-weights
HFST_REGEXP2FST = /usr/local/bin/hfst-regexp2fst
HFST_REMOVE_EPSILONS = /usr/local/bin/hfst-remove-epsilons
HFST_REPEAT = /usr/local/bin/hfst-repeat
HFST_REVERSE = /usr/local/bin/hfst-reverse
HFST_REWEIGHT = /usr/local/bin/hfst-reweight
HFST_SPLIT = /usr/local/bin/hfst-split
HFST_STRINGS2FST = /usr/local/bin/hfst-strings2fst
HFST_SUBSTITUTE = /usr/local/bin/hfst-substitute
HFST_SUBTRACT = /usr/local/bin/hfst-subtract
HFST_SUMMARIZE = /usr/local/bin/hfst-summarize
HFST_TWOLC = /usr/local/bin/hfst-twolc
HFST_TXT2FST = /usr/local/bin/hfst-txt2fst
HFST_XFST = /usr/local/bin/hfst-xfst
HFST_XFST2FST = false
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JV = /usr/bin/java
LEXC = /Users/rueter/bin/lexc
LIBOBJS = 
LIBS = 
LOOKUP = /Users/rueter/bin/lookup
LO_min_version = 3.6
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Users/rueter/main/langs/slh/build-aux/missing makeinfo
MKDIR_P = ../../build-aux/install-sh -c -d
PACKAGE = gtlangs-slh
PACKAGE_BUGREPORT = feedback@divvun.no
PACKAGE_NAME = gtlangs-slh
PACKAGE_STRING = gtlangs-slh 20110617
PACKAGE_TARNAME = gtlangs-slh
PACKAGE_URL = http://divvun.no
PACKAGE_VERSION = 20110617
PATH_SEPARATOR = :
PRINTF = /usr/bin/printf
PYTHON = /opt/local/bin/python3.2
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = darwin
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 3.2
RSYNC = /usr/bin/rsync
SAXON = false
SAXONJAR = /opt/local/share/java/saxon9he.jar
SEE = /usr/bin/see
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
TWOLC = /Users/rueter/bin/twolc
VERSION = 20110617
VISLCG3 = /usr/local/bin/vislcg3
VISLCG3_COMP = /usr/local/bin/cg-comp
WGET = no
XFST = /Users/rueter/bin/xfst
ZIP = /usr/bin/zip
abs_builddir = /Users/rueter/main/langs/slh/src/morphology
abs_srcdir = /Users/rueter/main/langs/slh/src/morphology
abs_top_builddir = /Users/rueter/main/langs/slh
abs_top_srcdir = /Users/rueter/main/langs/slh
am__leading_dot = .
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin12.5.0
build_alias = 
build_cpu = x86_64
build_os = darwin12.5.0
build_vendor = apple
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin12.5.0
host_alias = 
host_cpu = x86_64
host_os = darwin12.5.0
host_vendor = apple
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /Users/rueter/main/langs/slh/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/gtlangs-slh
pkgpythondir = ${pythondir}/gtlangs-slh
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python3.2/site-packages
pythondir = ${prefix}/lib/python3.2/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..

# Set this to name of lexc file containing Multichar_Symbols and LEXICON Root
GT_LEXC_ROOT = root.lexc

# Set this to the names of all other source lexc files
GT_LEXC_SRCS = \
			 affixes/adjectives.lexc \
			 affixes/nouns.lexc \
			 affixes/propernouns.lexc \
			 affixes/verbs.lexc \
			 stems/adjectives.lexc \
			 stems/nouns.lexc \
			 stems/numerals.lexc \
			 stems/prefixes.lexc \
			 stems/pronouns.lexc \
			 stems/verbs.lexc


# Set this to the names of all generated lexc files, if any
GENERATED_LEXC_SRCS = 

# Set this to the names of all source xml files, if any
GT_XML_SRCS = 

#### Tailored silent output text: ####
SAXON_verbose = $(SAXON_verbose_$(V))
SAXON_verbose_ = $(SAXON_verbose_$(AM_DEFAULT_VERBOSITY))
SAXON_verbose_0 = @echo "  SAXON    $@";
XSLPROC_verbose = $(XSLPROC_verbose_$(V))
XSLPROC_verbose_ = $(XSLPROC_verbose_$(AM_DEFAULT_VERBOSITY))
XSLPROC_verbose_0 = @echo "  XSLPROC  $@";
HLEXC_verbose = $(HLEXC_verbose_$(V))
HLEXC_verbose_ = $(HLEXC_verbose_$(AM_DEFAULT_VERBOSITY))
HLEXC_verbose_0 = @echo "  HLEXC    $@";
FST2FST_verbose = $(FST2FST_verbose_$(V))
FST2FST_verbose_ = $(FST2FST_verbose_$(AM_DEFAULT_VERBOSITY))
FST2FST_verbose_0 = @echo "  FST2FST  $@";
XFST_verbose = $(XFST_verbose_$(V))
XFST_verbose_ = $(XFST_verbose_$(AM_DEFAULT_VERBOSITY))
XFST_verbose_0 = @echo "  XFST     $@";

####### Source file defs: ########

#! @param GT_LEXC_ROOT required, define name of file holding root lexicon
#! @param GT_LEXC_SRCS optional, space separated list of file names holding
#!		  supplementary lexicon data
#! @param GENERATED_LEXC_SRCS optional, space separated list of file names
#!        holding supplementary lexicon data generated from xml files.
#! @param GT_XML_SRCS optional, space separated list of xml source file names
GT_LEXC_ALLSRC = $(GT_LEXC_ROOT) $(GT_LEXC_SRCS) \
				$(GENERATED_LEXC_SRCS) $(GT_XML_SRCS)


# All sources need to be included in the tarball
EXTRA_DIST = $(GT_LEXC_ALLSRC)

####### Automake targets: ########

# The transducers we build and don't distribute depend on the configuration:
GT_LEXICAL = $(am__append_1) $(am__append_2)
noinst_DATA = $(GT_LEXICAL)

####### XML2LEXC build rules: ####
XSLDIR = $(GTCORE)/scripts/xsl
MF = -Xmx1024m
#EF   = -it main # Saxon-B compatible version
EF = -it:main # Saxon-HE compatible version
XSLPROC = net.sf.saxon.Transform
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/am-shared/src-morphology-dir-include.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/morphology/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/morphology/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/am-shared/src-morphology-dir-include.am:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(DATA)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic \
	maintainer-clean-local

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-local \
	cscopelist-am ctags-am distclean distclean-generic distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic maintainer-clean-local mostlyclean \
	mostlyclean-generic pdf pdf-am ps ps-am tags-am uninstall \
	uninstall-am

#$(srcdir)/stems/%.lexc: stems/%.xml $(XSLDIR)/generate_lex-fileVM.xsl
#	$(SAXON_verbose)$(SAXON) -xsl:$(XSLDIR)/generate_lex-fileVM.xsl \
#		$(abs_srcdir)/$< inFile=$(abs_builddir)/$< > $@

# This target will convert each individual xml file to lexc:
$(srcdir)/stems/%.lexc: stems/%.xml $(XSLDIR)/generate_lex-fileVM.xsl
	$(XSLPROC_verbose)$(JV) $(MF) \
		-cp $$(echo "/opt/local/share/java/saxon9he.jar") $(XSLPROC) \
		$(EF) $$(echo "$(XSLDIR)/generate_lex-fileVM.xsl") \
		inFile=$$(echo "$(abs_builddir)/$<") > $@

####### Concatenate all lexc files - Xerox lexc doesn't quit on fail, and
####### Xerox xfst can only read one lexc file (we prefer to get an error
####### when something doesn't work); hfst does the concatenation automatically
####### but by doing it explicitly we have a source file to relate line numbers
####### in error messages to.
$(GTLANG)-all.lexc: $(GT_LEXC_ROOT) $(GT_LEXC_SRCS) $(GENERATED_LEXC_SRCS)
	$(AM_V_GEN)cat $^ > $@

##################################################
####### lexical transducer building rules: #######

####### HFST build rules: ########
$(GTLANG).lexc.hfst: $(GTLANG)-all.lexc
	$(HLEXC_verbose)  $(HFST_LEXC)    -f foma -o $@.foma $^
	$(FST2FST_verbose)$(HFST_FST2FST) -f openfst-tropical -i $@.foma -o $@
	$(AM_V_at)        rm -f $@.foma

####### Xerox build rules: #######
$(GTLANG).lexc.xfst: $(GTLANG)-all.lexc
	$(XFST_verbose)$(XFST) -q \
			-e "read lexc $^" \
			-e "compose net" \
			-e "save stack $@ " \
			-stop

####### Other targets: ###########
clean-local:
	-rm -f $(GT_LEXICAL) *.foma *.tmp.* \
		*.hfst *.xfst *.script $(GTLANG)-all.lexc

maintainer-clean-local:
	-rm -f $(GENERATED_LEXC_SRCS)

# vim: set ft=automake: 

# vim: set ft=automake:

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
